name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

# Needed for OIDC (Trusted Publishing) and for pushing tags back to the repo
permissions:
  id-token: write       # required for npm OIDC (Trusted Publishing)
  contents: write       # required so github-actions[bot] may 'git push' tags

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ./mk-magic-alerts-lib
      PROJECT_NAME: mk-magic-alerts

    steps:
      # Checkout the repository to the runner
      - uses: actions/checkout@v5

      # Setup Node.js environment
      - name: Use Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '24.x'

      # Ensure a recent npm that supports Trusted Publishing + provenance
      - name: Ensure recent npm
        run: npm i -g npm@latest

      # Safety: remove any accidental project .npmrc that could force tokens
      - name: Remove local .npmrc if present
        run: rm -f .npmrc && rm -f $HOME/.npmrc

      # Install jq tool for JSON processing
      - name: Install jq
        run: sudo apt-get install -y jq

      # Install dependencies at the root level
      - name: Install Dependencies
        run: npm ci
        working-directory: ${{ env.BASE_DIR }}
        env:
          npm_config_foreground_scripts: 'true'
          NX_SKIP_NATIVE_BINARY_DOWNLOAD: 'true'
          NX_NATIVE: 'false'
          NX_DAEMON: 'false'

      # Run tests at the root level
      - name: Run Tests
        run: npm run test:ci
        working-directory: ${{ env.BASE_DIR }}

      # Upload coverage to Codecov.
      # Upload coverage to Codecov (tokenless with Codecov GitHub App or public repo)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ${{ env.BASE_DIR }}/coverage/lcov.info  # point directly to LCOV file for faster uploads
          disable_search: true                           # skip auto-discovery to avoid noisy gcov/python warnings

      # Build the library from the specified subdirectory
      - name: Build Library
        run: npx ng build
        working-directory: ${{ env.BASE_DIR }}/projects/${{ env.PROJECT_NAME }}

      # Check if version has been updated
      - name: Check if version has been updated
        id: check_version
        run: |
          # Extract current and latest published version
          PACKAGE_NAME=$(jq -r '.name' package.json)
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          # Public package: npm view works without auth
          LATEST_PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")
          if [ "$CURRENT_VERSION" = "$LATEST_PUBLISHED_VERSION" ]; then
            echo "execute_publish=false" >> $GITHUB_ENV
          else
            echo "execute_publish=true" >> $GITHUB_ENV
          fi
        working-directory: ${{ env.BASE_DIR }}/dist/${{ env.PROJECT_NAME }}

      # Publish to npm via OIDC (no token)
      - name: Publish to npm via OIDC (no token)
        if: env.execute_publish == 'true'
        run: npm publish
        working-directory: ${{ env.BASE_DIR }}/dist/${{ env.PROJECT_NAME }}
        # No NODE_AUTH_TOKEN here â€” OIDC handles auth

      # Tag commit (push tag back to this repository using the built-in GITHUB_TOKEN)
      - name: Tag commit
        if: env.execute_publish == 'true' && success()
        run: |
          # Configure git author for the automated tag
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag v${{ env.CURRENT_VERSION }}-lib
          git push origin "v${{ env.CURRENT_VERSION }}-lib"
